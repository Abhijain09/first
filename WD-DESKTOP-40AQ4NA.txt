TLD(top level domain)(.com/.in/.org etc...)

anchor is seperated by #
it is used to navigation on current page.

domain name system(DNS)


static and dynamic

API(application programming interface)

beautify
html css support
jupyter
prettier


for inline elements margine(top,bottom),padding won't work


------------12-08-2021---------------

alt=""(for broken image)(glt pah dalne pr sirf likha aayega kuch show nhi krega)

<video></video>(add videos)

------------------------13-08-2021---------------
<a></a>(anchor tag)




--------------15-08-2021--------------
CSS-()
3 way to write
inline
internal
external

style= "cssname(color) : cssvalue ; background-color:cssValue "

when we use % it change according to the size of screen.

priority of CSS
inline>>internal>>external


--------------18-08-2021--------------

html is by default  position: static

position: relative->
an element with position relative is able to shift his position but it doesn't effect other elements.
(top,bottom,left,right)

position:fixed->(position ko fix kr deta h agr sacroll bhi krege to uspr kuch frk nhi pdega vo vhi  rhega)


position: absolute->
it allow to give explictly position (it works as a child on his parent class )


position: sticky->
(   )



symantic tag->

<header></header>(site ke top me hota h)
<section></section>(like as div tag) 
<footer></footer>(bottom part)
<main></main>(main body)
<span></span>


*Media Query *
it is use to make site good  it helps to set size of site according to device(mobile,laptop,tablet, large screen etc...)


*for use of Media Query it is important to write this in head tag*
*meta name="viewport" content="width-device-width, initial-scale=1.0"*


.mobile{
	display:block
	backgroung-color
font-size
}
@media(min-width:768px){
.mobile{
	display:none
}
.tablet{
	display:block
	backgroung-color:
font-size
}
}

@media(min-width:1024px){
.mobile{
	display:none
}
.tablet{
 	display:none
}
.laptop{
	display:block
	backgroung-color:
font-size
}
}

--------------Day-8-------------------
flexBox

4 type of flexbox
row 
row-reverse
column
column-reverse

flax-wrap: wrap;(make boxes)


justfy-content->(content ke sequence ke lie)

gap->(child element ke bich me space dene ke lie )

align-self:(perticular cell ke lie)

pseudo class(change the state)
pseudo element


-----------------------day-9----------------------

transform-(axis change)
transition-(change krta h  shape,time,delay,look,color )

-----------------------Day-10----------------

		Git

git config --global user.name "username"

git config --global user.name(check krne ke lie)

git config --global user.email "useremail"

git config --global user.email(check krne ke lie)

phle us folder me jayege jha se upload krni h file.

get init
get status
git add .
git commit -m "first commit"(comment show ke lie)
git branch -M main
git remote add origin https://github.com/Abhijain09/second.git(git pr set krne ke lie hr kisi ke lie alg hota h)
git push -u origin main



*for second time*
git add .
git commit -m "first commit"(comment show ke lie)
git push origin main

del for delete(windows)/rm -rf (linux)

		*for clone*

git clone  https://github.com/Abhijain09/first.git

clone update ke lie
git pull origin main


--------------------------Day-11----------------------

BEM -> block elements modifiers






		JAVA-SCRIPT
============================DAY-14===================================
console.log("")->print krane ke lie
console.error("")->error format me print krane ke lie.
console.warn("")->warning print krane ke lie.

PRIMITIVE datatype->they can not be modified, they do not provide any method.
*null
*string
*number
*big int
*boolean
*undefined
*symbol



*number->in JS all degits include in number ,
	its range is -(25^3 -1) to (25^3 -1)or -(15624) to (15624).

BigInt-> we use big int when number cross its range.we have to add *n* in last  to make number BigInt.



Non-PRIMITIVE datatype->
Array
object
 

================================================DAY-16==================================================


var color = ["r", 1, 2, "b", "B", "R", "qgubewigb"];
color.push("a"); ->add in last
color.unshift("f"); ->add in first
color.pop(); -> deleted last value
color.shift(); -> delete first value
console.log(color.join("-")); ->it joins array value by given sign.
console.log(color.indexOf("R")); ->show tha index of given value 0 se start hota h
console.log(color.sort()); ->sort the data of array  numbers,capital latters,small latters
console.log(color.reverse()); -> sort in desending order
var newcolor = color.slice(1, 3); -> slice the array from index 1 to index 3-1 .becasue array start from 0 index.



var age = [1, 2, 3, 4, 5, 6];
var f = age.find(myFunc); //func without argument

function myFunc(value, index, array) {
    //return value > 2; //return next greater value from 2
    return index > 3; //return next index;
}
console.log(f);

age.forEach(function(e) {
    console.log(e + 5); //work on all value of age array
});

for (var e of age) {
    console.log(e); // same as age.forEach
}




var obj = { 65: "A", 66: "B", 67: "C" };
console.log(obj);
console.log(Object.keys(obj)); ->print keys
console.log(Object.values(obj)); ->print values of keys
console.log(Object.entries(obj)); ->show data array of array
console.log(obj.hasOwnProperty(65)); -> show the given key is present or not.
console.log(obj.hasOwnProperty("pr2")); -> give boolean values.
obj.foo = "bar1"; -> create a new key if there are no such key by given name.
console.log(obj.foo);
console.log(obj);



var obje = { name: "js" };
var freezeObj = Object.freeze(obje); -> if we freeze any obj then we are not able to change anything in it
console.log(freezeObj);
console.log(Object.isFrozen(obje)); -> check obj is freeze or not



function say(mes = 2)  ->if we dont give any perameter it take tha given value  and if we give perameter ,it will take it.
{
    console.log(mes);
}
say(4);



======================================DAY-17============================================================

ES6 JAVA SCRIPT
in this js intro  duce Let 
it is similar as var 
but it is a block scope and Var has h global Scope 
 

*Spread operator*->it has 3 dots(...) it allow to spreadout element of an obj such as array obj

ex->
const array1 = [1, 2, 3, 4, 5, 6];
const array2 = [...array1, 9, 10];-> spread array1 in staring of array2  
console.log(array2)

output-> 1,2,3,4,5,6,9,10

Template Literal (``)->in this we are able to write multiple line without usnig \n.


let simpleString = "this   is a simple string";
let templit = `this    is
tamplate literal`; -> this is tamplate variable 
console.log("noramlString =" + simpleString);console.log("template" + templit + "literal=");
console.log(`template ${templit} litearl=`);-> this is tamplate syntex

----------------------------DAY-18-------------------------
DOM Mainpulation->it is randring the data 

document.getElementbyId("")
document.querySelector("")
document.querySelector("").innerHTML="Hello word"

to create new element in DOM using JS

avi=document.createElement("div");
avi.classList.add("mystyle");====> multiple classes de skte hai aese
document.getElementById("b").appendChild(avi);====> ni=ormally append krne ke liye
console.log(avi);

note==> script src wali line body m sbse neeche likhni hai nhi to work nhi krega


----------------------------DAY-19-----------------------
ES6 
Destructuring is use to get the index or an element of array into indivitual variables.

const arr = [11, 12, 13, 14, 15];

const [one, two, three, four] = arr;

if variable is more than array value then it have undefin value.


const obj = {
    name: "Abhinandan Jain",
    email: "abhijain092000@gmail.com",
    age: 21
}


let { name, email, age, dum } = obj;
//if we change variable order it doesn't change value it work smarter
//let { name, age, email, dum } = obj;
//we have to give same name as creating object elements.


		*ES6 arrow function*

in arrow function we don't have need to use return function.

Ex-> let add=(x,y)=> x+y;
console.log(add(10,20));

we don't need to use '{' or return statement in one or single expression.

we have two or more expression we have to use return '{'

let add=(x,y)=>{
	console.log(x);
	return(x+y);
}


Arrow doesn't have its own "this" value and the argument object but function has. therefore arrow function cannot be used as an object handler.

const counter = {
    count: 0,
    next: function() {
        return ++(this.count);
    }
}
console.log(counter.next());

output=>1

*NOTE-> 'this' keyword we have to use in function else it will point to browser*

			*Map*

map()=> it works same as foreach but it return new array after itration.

we use 3 perameter in map function
1.vlaue
2.index
3. 2d array of orignal size. but at each index we will get whole orignal array.


1.Value
const arr1 = [10, 20, 30];
const newArr = arr1.map((e) => e + 1);
console.log(newArr);

output=>*[11,21,31]*

		2.index
const newArr1 = arr1.map((e, i) => i);
console.log(newArr1);


		3.2Darray
const newArr2 = arr1.map((e, i, b) => b);
console.log(newArr2);


		*filter()*

it works same as map but it create a new array of  require value but map gives us all value of orignal array.


let filterArr = [1, 2, 3, 4];
const newFilterArr = filterArr.filter((value) => {
    if (value % 2 == 0) {
        return value;
    }
});
console.log(newFilterArr);

let mapArr = [1, 2, 3, 4];
const newMapArr = mapArr.map((value) => {
    if (value % 2 == 0) {
        return value;
    }
});
console.log(newMapArr);


			*Promise*

Promise is a oject that return value that we hope to recive in the future  not imidately. because promise handle assyncronise operations.

it start with pending and end with either resolve or rejected.


Generally Promise object is created using setTime() which make operation to go sleep i.e they will be in pending state. After given timeout we can see its state.

timeOut hone se phle open kr lete h to vo data undefine ho jata h.

ex->
let concert = true;
let attendConcert = new Promise(function(fulfill, reject) {
    setTimeout(() => {
        if (concert) { fulfill("Naveen ATTENDED THE CONCERT"); } else {
            reject("Failed to attend the concert");
        }
    }, 200);
});


we use two function then() and catch() to handle or perform task on Promise object.

API can give anything that could be fulfilled state or rejected state. so to work on that we use both then() and catch() function.

ex->

attendConcert.then((data)=>console.log(data));
attendConcert.catch((error)=>console.log(error));


if we get rejected state and we have both function in two different lines still we will get error because of then() function but if will get resolved due to catch() function.so we have to use both function in same line

attendConcert.then((data)=>console.log(data)).catch((error)=>console.log(error));



		*asyc and await*
it is upadeted version of  then and catch.


async function afunc() {
    let result = await attendConcert;
    console.log(result)
    return result;
}
afunc() 

it wasn't any error, to catch error we have to use try and catch block.


async function func() {
    try {
        let result = await attendConcert;
        console.log(result)
    } catch (e) {
        console.log(e);
    }
}

func(); 

--------------------------------------------------

Bootstrap allow us to build application without CSS.
